{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["mapContainerStyle","height","width","options","disableDefaultUI","zoomControl","mapTypeControl","streetViewControl","center","lat","lng","App","React","useState","availableCountries","setAvailableCountries","selectedCountry","setSelectedCountry","mapRef","setMapRef","onMapClick","useCallback","e","console","log","getAvailableCountries","name","a","trim","length","fetch","response","json","data","Array","isArray","countryNames","map","country","label","value","numericCode","latlng","area","population","className","isClearable","onSelectResetsInput","onChange","onInputChange","event","id","zoom","onClick","onLoad","position","text","color","fontSize","dataSource","palette","title","argumentField","valueField","visible","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAeMA,EAAoB,CACxBC,OAAQ,OACRC,MAAO,QAEHC,EAAU,CACdC,kBAAkB,EAClBC,aAAa,EACbC,gBAAe,EACfC,mBAAkB,GAGdC,EAAS,CAAEC,IAAK,UAAWC,IAAK,WA4GvBC,EAzGL,WAKV,MAAoDC,IAAMC,SAAS,IAAnE,mBAAOC,EAAP,KAA2BC,EAA3B,KACA,EAA8CH,IAAMC,SAAS,MAA7D,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAA4BL,IAAMC,SAAS,MAA3C,mBAAOK,EAAP,KAAeC,EAAf,KACMC,EAAaR,IAAMS,aAAY,SAACC,GACpCC,QAAQC,IAAIN,EAAOI,KAClB,CAACJ,IACEO,EAAqB,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,2DAE3BD,GAAQA,EAAKE,OAAOC,OAAO,GAFA,iCAGPC,MAAM,yCAAD,OAA0CJ,IAHxC,cAGxBK,EAHwB,gBAIXA,EAASC,OAJE,OAIxBC,EAJwB,OAMzBC,MAAMC,QAAQF,KAEfG,EAAeH,EAAKI,KAAI,SAACC,GAC3B,MAAO,CACLC,MAAQD,EAAQZ,KAChBY,QAASA,EAAQZ,KACjBc,MAAOF,EAAQG,YACfC,OAAQJ,EAAQI,OAChBC,KAAML,EAAQM,eAGlB7B,EAAsBqB,IAjBQ,wBAoB9BrB,EAAsB,IApBQ,4CAAH,sDAuBzB,OACE,sBAAK8B,UAAU,MAAf,UACE,sBAAKA,UAAU,aAAf,UACE,qBAAKA,UAAU,aAAf,SACE,kEAIF,cAAC,IAAD,CACEC,aAAW,EACXC,qBAAqB,EACrBC,SAAU,SAACV,GAAD,OAAWrB,EAAmBqB,IACxCE,MAAOxB,GAAgC,GACvCiC,cAAe,SAACC,GACdzB,EAAsByB,IAExB/C,QAASW,OAGX,eAAC,IAAD,CACAqC,GAAG,MACHnD,kBAAmBA,EACnBoD,KAAM,IACN5C,OAAQA,EACRL,QAASA,EACTkD,QAASjC,EACTkC,OAAQ,SAAApC,GAAM,OAAIC,EAAUD,IAP5B,UASCJ,EAAmBuB,KAAI,SAACC,GAAD,OACtB,cAAC,IAAD,CAEEiB,SAAU,CAAE9C,IAAK6B,EAAQI,OAAO,GAAIhC,IAAK4B,EAAQI,OAAO,IACxDH,MAAO,CACLiB,KAAMlB,EAAQC,MACdkB,MAAO,UACPC,SAAU,SANd,UACUpB,EAAQI,OAAO,GADzB,YAC+BJ,EAAQI,OAAO,QAS/C1B,EAAgB,cAAC,IAAD,CACjBuC,SAAU,CAAE9C,IAAKO,EAAgB0B,OAAO,GAAIhC,IAAKM,EAAgB0B,OAAO,IADvD,SAGf,8BACC,6BACG1B,EAAgBuB,YAGR,QAEhB,qBAAKM,UAAU,YAAf,SACA,eAAC,IAAD,CACEM,GAAG,MACHQ,WAAY3C,EAAgB,CAACA,GAAiBF,EAC9C8C,QAAQ,SACRC,MAAM,0BAJR,UAME,cAAC,SAAD,CACEC,cAAc,UACdC,WAAW,OAFb,SAIE,cAAC,QAAD,CAAOC,SAAS,EAAhB,SACE,cAAC,YAAD,CAAWA,SAAS,EAAM9D,MAAO,QAGrC,cAAC,OAAD,CAAMA,MAAO,eCnHN+D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.7a04540f.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  GoogleMap,\n//useLoadScript,\n  InfoWindow,\n  Marker,\n} from \"@react-google-maps/api\";\nimport Select from 'react-select';\nimport PieChart, {\n  Series,\n  Label,\n  Connector,\n  Size,\n} from 'devextreme-react/pie-chart';\nimport './App.css';\nconst mapContainerStyle = {\n  height: \"60vh\",\n  width: \"80vw\",\n};\nconst options = {\n  disableDefaultUI: true,\n  zoomControl: true,\n  mapTypeControl:false,\n  streetViewControl:false,\n\n};\nconst center = { lat: 30.033333, lng: 31.233334 };\n//const apiKey = \"AIzaSyB_y1V08dj1ruvJ7Su9y3aPfKEBvd7lJzY\";\n//const libraries= ['places'];\nconst App=()=> {\n// const { isLoaded, loadError } = useLoadScript({\n//   googleMapsApiKey: apiKey,\n//   libraries, \n// });\nconst [availableCountries, setAvailableCountries] = React.useState([]);\nconst [selectedCountry, setSelectedCountry] = React.useState(null); \nconst [mapRef, setMapRef] = React.useState(null);\nconst onMapClick = React.useCallback((e) => {\n  console.log(mapRef,e);\n}, [mapRef]);\nconst getAvailableCountries = async (name) =>{\n //Apply search when user enter more than two characters\nif(name && name.trim().length>2){\nconst response = await fetch(`https://restcountries.eu/rest/v2/name/${name}`)\nconst data = await response.json();\n// Endpoint response check\n  if(Array.isArray(data)){\n    // Creating New Array to be used in ReactSelect & GoogleMaps\nlet countryNames = data.map((country)=>{\n  return {\n    label : country.name,\n    country: country.name,\n    value: country.numericCode,\n    latlng: country.latlng,\n    area: country.population \n    }\n  })\nsetAvailableCountries(countryNames);\n }\n}else{\nsetAvailableCountries([]);\n  }\n}\n  return (\n    <div className=\"App\">\n      <div className=\"search-bar\">\n        <div className=\"label-name\">\n          <label>\n          Please enter country name : \n          </label>\n        </div>\n        <Select\n          isClearable\n          onSelectResetsInput={true}\n          onChange={(country)=>setSelectedCountry(country)}\n          value={selectedCountry?selectedCountry:''}\n          onInputChange={(event)=>{\n            getAvailableCountries(event);\n          }}\n          options={availableCountries}\n        />\n      </div>\n        <GoogleMap\n        id=\"map\"\n        mapContainerStyle={mapContainerStyle}\n        zoom={2.5}\n        center={center}\n        options={options}\n        onClick={onMapClick}\n        onLoad={mapRef => setMapRef(mapRef)}\n      >\n        {availableCountries.map((country) => (\n          <Marker\n            key={`${country.latlng[0]}-${country.latlng[1]}`}\n            position={{ lat: country.latlng[0], lng: country.latlng[1] }}\n            label={{\n              text: country.label,\n              color: '#222222',\n              fontSize: '12px'\n            }}\n          />\n        ))}\n        {selectedCountry?<InfoWindow  \n        position={{ lat: selectedCountry.latlng[0], lng: selectedCountry.latlng[1] }}\n         >\n          <div>\n           <h2>\n             {selectedCountry.label}\n           </h2>\n          </div>\n        </InfoWindow>:null}\n      </GoogleMap>\n      <div className='pie-chart'>\n      <PieChart\n        id=\"pie\"\n        dataSource={selectedCountry?[selectedCountry]:availableCountries}\n        palette=\"Bright\"\n        title=\"Population of Countries\"\n      >\n        <Series\n          argumentField=\"country\"\n          valueField=\"area\"\n        >\n          <Label visible={true}>\n            <Connector visible={true} width={6} />\n          </Label>\n        </Series>\n        <Size width={600} />\n      </PieChart>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}